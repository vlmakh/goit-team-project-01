{"mappings":"CAAK,WAEC,IAAIA,EAAc,CAChBC,MAAO,CAELC,SAAU,CAACC,QAAS,qBAEpBF,MAAO,CAACE,QAAS,iCAEnBC,MAAO,CACHF,SAAU,CAACC,QAAS,qBACpBE,OAAQ,CAEJC,QAAS,SAETC,MAAO,IACPJ,QAAS,qDAGjBK,SAAU,CAERN,SAAU,CAACC,QAAS,qBAEpBM,OAAQ,CACNC,QAAS,EACTC,QAAS,MAMTC,EAAOC,SAASC,cAAc,aAC9BC,EAAeF,SAASC,cAAc,uBAE5CF,EAAKI,iBAAiB,UAAU,SAASC,GAkBzC,IAA0BC,EAEpBC,EAnBJF,EAAGG,iBAiBqBF,EAhBPN,EAkBbO,EAASE,SAASH,EAAMlB,GAS9B,SAAoBkB,EAAMC,GAEpBG,EAAEC,KAAKL,EAAKM,iBAAiB,8BAA8B,SAASC,GAGpEC,EAAmBD,EAAON,GAAUA,EAAOM,EAAME,UAZrDC,CAAWV,EAAMC,GAAU,IACtBA,GAiGHP,EAAKiB,YAnHPd,EAAaC,iBAAiB,cAAc,SAAUc,GAClDlB,EAAKmB,UAAUC,OAAO,gBAK5B,IADA,IAAIC,EAASpB,SAASW,iBAAiB,2BAC9BU,EAAI,EAAGA,EAAID,EAAOxB,SAAUyB,EACnCD,EAAOE,KAAKD,GAAGlB,iBAAiB,UAAU,SAASC,GAEjDS,EAAmBU,MADNf,SAAST,EAAMZ,IAAgB,IACZoC,KAAKT,UAmCzC,SAASD,EAAmBD,EAAON,GAGjC,IAAIkB,EAAYC,EAAcb,EAAMc,WAAY,cAE5CC,EAAWH,EAAUvB,cAAc,cAkCzC,SAAwBuB,GAEpBzB,EAAKmB,UAAUC,OAAO,aACtBjB,EAAagB,UAAUC,OAAO,aAChCK,EAAUN,UAAUC,OAAO,aAC3BK,EAAUN,UAAUC,OAAO,eAE3BV,EAAEC,KAAKc,EAAUb,iBAAiB,sBAAsB,SAASiB,GAC/DA,EAAGF,WAAWG,YAAYD,MAxC5BE,CAAeN,GAEXlB,GApBJ,WACI,IAAIyB,GAAa,EAOf,OALFtB,EAAEC,KAAKX,EAAKY,iBAAiB,gBAAgB,SAAUC,GAC/B,KAAhBA,EAAMoB,QACND,GAAa,MAGZA,EAcLE,IACAlC,EAAKmB,UAAUgB,IAAI,aAGvBhC,EAAagB,UAAUgB,IAAI,aAC7BV,EAAUN,UAAUgB,IAAI,aAExBzB,EAAEC,KAAKJ,GAAQ,SAAS6B,IAmC5B,SAAkBR,EAAUQ,GAC1B,IAAIC,EAAOpC,SAASqC,cAAc,QAClCD,EAAKlB,UAAUgB,IAAI,gBAEnB,IAAII,EAAgBtC,SAASqC,cAAc,QAC3CC,EAAcC,UAAYJ,EAE1B,IAAIK,EAAQxC,SAASqC,cAAc,KACnCG,EAAMtB,UAAUgB,IAAI,cACpBM,EAAMtB,UAAUgB,IAAI,SACpBM,EAAMC,YAAYL,GAClBI,EAAMC,YAAYH,GAElBX,EAASc,YAAYD,GA/CjBE,CAASf,EAAUQ,OAIrBX,EAAUN,UAAUgB,IAAI,eAK5B,SAAST,EAAckB,EAAOC,GAC5B,OAAKD,GAASA,GAAS3C,SAGnB2C,EAAMzB,UAAU2B,SAASD,GACpBD,EAEAlB,EAAckB,EAAMjB,WAAYkB,GALhC,MAjHZ","sources":["src/js/form-validate.js"],"sourcesContent":["    (function() {\n      // These are the constraints used to validate the form\n      var constraints = {\n        email: {\n          // Email is required\n          presence: {message: \"field is required\"},\n          // and must be an email (duh)\n          email: {message: \"is not a valid email address\"},\n        },\n        phone: {\n            presence: {message: \"field is required\"},\n            format: {\n                // We don't allow anything that a-z and 0-9\n                pattern: \"[0-9]+\",\n                // but we don't care if the username is uppercase or lowercase\n                flags: \"i\",\n                message: \" This phone must be in the format  099 000 00 00\"\n          }\n        },\n        username: {\n          // You need to pick a username too\n          presence: {message: \"field is required\"},\n          // And it must be between 3 and 25 characters long\n          length: {\n            minimum: 3,\n            maximum: 25\n          },\n        },  \n      };\n\n      // Hook up the form so we can prevent it from being posted\n        var form = document.querySelector(\"form#main\");\n        var submitButton = document.querySelector('.button-order-modal');\n\n      form.addEventListener(\"submit\", function(ev) {\n        ev.preventDefault();\n        handleFormSubmit(form);\n      });\n        \n        submitButton.addEventListener('mouseleave', function (e) {\n            form.classList.remove('has-error')\n        })\n\n      // Hook up the inputs to validate on the fly\n      var inputs = document.querySelectorAll(\"input, textarea, select\")\n      for (var i = 0; i < inputs.length; ++i) {\n        inputs.item(i).addEventListener(\"change\", function(ev) {\n          var errors = validate(form, constraints) || {};\n          showErrorsForInput(this, errors[this.name])\n        });\n      }\n\n      function handleFormSubmit(form, input) {\n        // validate the form against the constraints\n        var errors = validate(form, constraints);\n        // then we update the form to reflect the results\n        showErrors(form, errors || {});\n        if (!errors) {\n          showSuccess();\n        }\n      }\n\n      // Updates the inputs with the validation errors\n      function showErrors(form, errors) {\n            // We loop through all the inputs and show the errors for that input\n            _.each(form.querySelectorAll(\"input[name], select[name]\"), function(input) {\n            // Since the errors can be null if no errors were found we need to handle\n            // that\n            showErrorsForInput(input, errors && errors[input.name]);\n            });\n        }\n      \n        function isAllInputsEmpty() {\n            let isAllEmpty = true;\n           \n            _.each(form.querySelectorAll(\"input[name]\"), function (input) {\n                if (input.value !== '') {\n                    isAllEmpty = false;\n                }\n            });\n              return isAllEmpty;\n      }\n      // Shows the errors for a specific input\n      function showErrorsForInput(input, errors) {\n        // This is the root of the input\n        \n        var formGroup = closestParent(input.parentNode, \"form-group\")\n          // Find where the error messages will be insert into\n          , messages = formGroup.querySelector(\".messages\");\n        // First we remove any old messages and resets the classes\n        resetFormGroup(formGroup);\n        // If we have errors\n        if (errors) {\n          // we first mark the group has having errors\n            if (isAllInputsEmpty()) {\n                form.classList.add('has-error');\n            }\n\n            submitButton.classList.add('has-error');  \n          formGroup.classList.add(\"has-error\");\n          // then we append all the errors\n          _.each(errors, function(error) {\n            addError(messages, error);\n          });\n        } else {\n          // otherwise we simply mark it as success\n          formGroup.classList.add(\"has-success\");\n        }\n      }\n\n      // Recusively finds the closest parent that has the specified class\n      function closestParent(child, className) {\n        if (!child || child == document) {\n          return null;\n        }\n        if (child.classList.contains(className)) {\n          return child;\n        } else {\n          return closestParent(child.parentNode, className);\n        }\n      }\n\n      function resetFormGroup(formGroup) {\n        // Remove the success and error classes\n          form.classList.remove('has-error');\n          submitButton.classList.remove('has-error');\n        formGroup.classList.remove(\"has-error\");\n        formGroup.classList.remove(\"has-success\");\n        // and remove any old messages\n        _.each(formGroup.querySelectorAll(\".help-block.error\"), function(el) {\n          el.parentNode.removeChild(el);\n        });\n      }\n\n      // Adds the specified error with the following markup\n      // <p class=\"help-block error\"><span class=\"icon\"></><span>[message]</span></p>\n      function addError(messages, error) {\n        var icon = document.createElement('span');\n        icon.classList.add('icon-warning');\n          \n        var spanErrorText = document.createElement('span');\n        spanErrorText.innerText = error;\n          \n        var block = document.createElement(\"p\");\n        block.classList.add(\"help-block\");\n        block.classList.add(\"error\");\n        block.appendChild(icon);\n        block.appendChild(spanErrorText);\n          \n        messages.appendChild(block);\n      }\n\n      function showSuccess() {\n        // We made it \\:D/\n          form.submit();\n      }\n    })();"],"names":["constraints","email","presence","message","phone","format","pattern","flags","username","length","minimum","maximum","form1","document","querySelector","submitButton","addEventListener","ev","form","errors","preventDefault","validate","_","each","querySelectorAll","input","showErrorsForInput","name","showErrors","submit","e","classList","remove","inputs","i","item","this","formGroup","closestParent","parentNode","messages","el","removeChild","resetFormGroup","isAllEmpty","value","isAllInputsEmpty","add","error","icon","createElement","spanErrorText","innerText","block","appendChild","addError","child","className","contains"],"version":3,"file":"index.9f581c80.js.map"}